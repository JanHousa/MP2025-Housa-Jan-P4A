@page "/login"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light custom-background">
    <div class="card shadow-lg p-4 position-relative" style="max-width: 400px; width: 100%;">
        <div class="text-center">
            <h3 class="mb-4">Login</h3>
        </div>

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Processing your request...</p>
            </div>
        }
        else
        {
            <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter your username" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        }

        @if (!string.IsNullOrEmpty(loginMessage))
        {
            <div class="alert alert-info mt-3">
                @loginMessage
            </div>
        }

        <div class="text-center mt-3">
            <small>Don't have an account? <a href="/register" class="text-primary">Register here</a></small>
        </div>
    </div>
</div>

<style>
    .custom-background {
        background-image: url('./images/joinlobby_background.jpg'); 
        background-size: cover; 
        background-position: center; 
        background-repeat: no-repeat; 
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string loginMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:5198/api/user/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                loginMessage = "Login successful!";

                // Ulozeni tokenu do localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.token);

                // Přesměrování po 3 vteřinách
                await Task.Delay(3000);
                Navigation.NavigateTo("/");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                loginMessage = $"Login failed: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            loginMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string token { get; set; }
    }
}
