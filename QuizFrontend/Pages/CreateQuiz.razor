@page "/create-quiz"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.IdentityModel.Tokens.Jwt;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 1.25rem;
    }

    .form-select {
        font-size: 1.25rem;
    }

    .page-bg {
        background: linear-gradient(120deg, #767cac 20%, #EAEFFF 100%);
        background-size: cover;
        background-repeat: no-repeat;
        min-height: 100vh;
        width: 100%;
        padding-top: 3rem;
    }

    .quiz-container {
        background-color: #ffffff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
    }

    .quiz-title {
        color: #333;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .question-card {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 1rem;
        background-color: #f9f9f9;
    }

    .question-header {
        font-weight: 500;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-link {
        text-decoration: none;
        color: #0d6efd;
        font-weight: 500;
    }

        .btn-link:hover {
            text-decoration: underline;
            color: #0b5ed7;
        }

    .question-detail {
        margin-top: 10px;
        padding-left: 10px;
        border-left: 2px solid #ccc;
    }

    .new-question-card {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 15px;
        background-color: #fefefe;
    }
</style>

<div class="page-bg">
    <div class="container quiz-container">
        <h3 class="quiz-title">Create Quiz</h3>

        <EditForm Model="@createQuizModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Title:</label>
                <InputText class="form-control" @bind-Value="createQuizModel.Title" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description:</label>
                <InputTextArea class="form-control" @bind-Value="createQuizModel.Description" />
            </div>

            <h4>Questions (@questions.Count)</h4>

            @for (int i = 0; i < questions.Count; i++)
            {
                var q = questions[i];

                <div class="question-card">
                    <div class="question-header">
                        <span>Question @(i + 1) (ID: @q.Id)</span>
                        <button type="button" class="btn btn-link"
                                @onclick="() => ToggleQuestionVisibility(q.Id)">
                            @(visibleQuestionIds.Contains(q.Id) ? "Hide" : "Show")
                        </button>
                    </div>

                    @if (visibleQuestionIds.Contains(q.Id))
                    {
                        <div class="question-detail">
                            <p><strong>Title: </strong>@q.Title</p>
                            <p><strong>Text: </strong>@q.Text</p>
                            <p><strong>Image URL: </strong>@q.ImageUrl</p>
                            <p><strong>Type: </strong>@q.Type</p>
                            <p><strong>Options: </strong>@string.Join(", ", q.Options.Select(o => o.Text))</p>
                            <p><strong>Correct Answer: </strong>@q.CorrectAnswer</p>

                            <button type="button" class="btn btn-danger"
                                    @onclick="() => RemoveQuestion(q)">
                                Remove Question
                            </button>
                        </div>
                    }
                </div>
            }

            <div class="mb-3">
                <button type="button" class="btn btn-primary me-2" @onclick="ShowNewQuestionForm">
                    New Question
                </button>
                <button type="submit" class="btn btn-success">
                    Create Quiz
                </button>
            </div>

            @if (isNewQuestionVisible)
            {
                <div class="new-question-card mb-3">
                    <h4>Add New Question</h4>

                    <div class="mb-3">
                        <label class="form-label">Question Title:</label>
                        <InputText class="form-control" @bind-Value="newQuestion.Title" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Question Text:</label>
                        <InputTextArea class="form-control" @bind-Value="newQuestion.Text" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Image URL:</label>
                        <InputText class="form-control" @bind-Value="newQuestion.ImageUrl" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Type:</label>
                        <InputSelect class="form-select"
                                     TValue="string"
                                     Value="@newQuestion.Type"
                                     ValueChanged="@OnTypeChanged"
                                     ValueExpression="@(() => newQuestion.Type)">
                            <option value="Yes/No">Yes/No</option>
                            <option value="Multiple Choice">Multiple Choice</option>
                        </InputSelect>
                    </div>

                    @if (newQuestion.Type == "Yes/No")
                    {
                        <div class="mb-3">
                            <label class="form-label">Correct Answer:</label>
                            <select class="form-select" @bind="newQuestion.CorrectAnswer">
                                <option value="Yes">Yes</option>
                                <option value="No">No</option>
                            </select>
                        </div>
                    }

                    @if (newQuestion.Type == "Multiple Choice")
                    {
                        <div class="mb-3">
                            <label class="form-label">Options:</label>
                            @for (int j = 0; j < newQuestion.Options.Count; j++)
                            {
                                var option = newQuestion.Options[j];
                                <div class="input-group mb-2" @key="option.Id">
                                    <InputText class="form-control"
                                               @bind-Value="option.Text"
                                               placeholder="@($"Option {j + 1}")" />
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Correct Answer:</label>
                            <InputText class="form-control" @bind-Value="newQuestion.CorrectAnswer" />
                        </div>
                    }

                    <button type="button" class="btn btn-secondary" @onclick="AddQuestion">
                        Save Question
                    </button>
                </div>
            }
        </EditForm>

        @if (!string.IsNullOrEmpty(createQuizMessage))
        {
            <div class="alert alert-info">@createQuizMessage</div>
        }
    </div>
</div>

@code {
    // Třída reprezentující jednotlivou možnost s jedinečným ID
    public class OptionModel
    {
        public int Id { get; set; }
        public string Text { get; set; }
    }

    // Autoincrement ID pro nové otázky a možnosti
    private static int nextQuestionId = 1;
    private static int nextOptionId = 1;

    private CreateQuizModel createQuizModel = new();
    private List<QuestionModel> questions = new();

    // ID otázek, které jsou právě "rozbalené"
    private HashSet<int> visibleQuestionIds = new();

    private QuestionModel newQuestion = new QuestionModel
        {
            Type = "Yes/No",
            Options = new List<OptionModel>
        {
            new OptionModel { Id = nextOptionId++, Text = "Yes" },
            new OptionModel { Id = nextOptionId++, Text = "No" }
        }
        };

    private bool isNewQuestionVisible = false;
    private string createQuizMessage;

    public class CreateQuizModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public List<QuestionModel> Questions { get; set; } = new();
        public int OwnerId { get; set; }
    }

    public class QuestionModel
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Text { get; set; }
        public string ImageUrl { get; set; }
        public string Type { get; set; } = "Yes/No";
        public List<OptionModel> Options { get; set; } = new();
        public string CorrectAnswer { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetOwnerIdFromLocalStorage();
    }

    private async Task SetOwnerIdFromLocalStorage()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var ownerIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "id")?.Value;

            if (int.TryParse(ownerIdClaim, out var ownerId))
            {
                createQuizModel.OwnerId = ownerId;
            }
            else
            {
                createQuizMessage = "Failed to retrieve owner ID from token.";
            }
        }
        else
        {
            createQuizMessage = "You must be logged in to create a quiz.";
        }
    }

    private void OnTypeChanged(string newValue)
    {
        if (newQuestion.Type != newValue)
        {
            newQuestion.Type = newValue;
            if (newValue == "Multiple Choice")
            {
                newQuestion.Options = new List<OptionModel>
                {
                    new OptionModel { Id = nextOptionId++, Text = "" },
                    new OptionModel { Id = nextOptionId++, Text = "" },
                    new OptionModel { Id = nextOptionId++, Text = "" },
                    new OptionModel { Id = nextOptionId++, Text = "" }
                };
            }
            else
            {
                newQuestion.Options = new List<OptionModel>
                {
                    new OptionModel { Id = nextOptionId++, Text = "Yes" },
                    new OptionModel { Id = nextOptionId++, Text = "No" }
                };
            }
        }
    }

    private void ShowNewQuestionForm()
    {
        isNewQuestionVisible = true;
    }

    private void AddQuestion()
    {
        // Základní validace
        if (string.IsNullOrEmpty(newQuestion.Title) ||
            string.IsNullOrEmpty(newQuestion.Text) ||
            string.IsNullOrEmpty(newQuestion.ImageUrl))
        {
            createQuizMessage = "Please fill in all required fields for the question.";
            return;
        }

        // Kontrola na 4 možnosti pro Multiple Choice
        if (newQuestion.Type == "Multiple Choice" && newQuestion.Options.Count != 4)
        {
            createQuizMessage = "Multiple-choice questions must have exactly 4 options.";
            return;
        }

        if (newQuestion.Type == "Yes/No" && string.IsNullOrEmpty(newQuestion.CorrectAnswer))
        {
            createQuizMessage = "Correct answer must be selected for Yes/No questions.";
            return;
        }

        // Vytvoříme novou otázku s unikátním ID
        var questionToAdd = new QuestionModel
            {
                Id = nextQuestionId++,
                Title = newQuestion.Title,
                Text = newQuestion.Text,
                ImageUrl = newQuestion.ImageUrl,
                Type = newQuestion.Type,
                Options = new List<OptionModel>(newQuestion.Options.Select(o => new OptionModel { Id = o.Id, Text = o.Text })),
                CorrectAnswer = newQuestion.CorrectAnswer
            };

        questions.Add(questionToAdd);

        // Reset pro další otázku
        ResetNewQuestion();
        createQuizMessage = string.Empty;
        isNewQuestionVisible = false;
    }

    private void ResetNewQuestion()
    {
        // Po přidání otázky se formulář vrací do stavu pro Yes/No
        newQuestion = new QuestionModel
            {
                Type = "Yes/No",
                Options = new List<OptionModel>
            {
                new OptionModel { Id = nextOptionId++, Text = "Yes" },
                new OptionModel { Id = nextOptionId++, Text = "No" }
            }
            };
    }

    private async Task HandleValidSubmit()
    {
        if (questions.Count == 0)
        {
            createQuizMessage = "Please add at least one question before creating the quiz.";
            return;
        }

        if (createQuizModel.OwnerId == 0)
        {
            createQuizMessage = "Owner ID is not set. You must be logged in to create a quiz.";
            return;
        }

        try
        {
            // Před odesláním převedeme naše interní modely na strukturu,
            // kterou API očekává – tedy options jako List<string>
            var quizToSend = new
            {
                title = createQuizModel.Title,
                description = createQuizModel.Description,
                ownerId = createQuizModel.OwnerId,
                questions = questions.Select(q => new
                {
                    id = q.Id,
                    title = q.Title,
                    text = q.Text,
                    imageUrl = q.ImageUrl,
                    type = q.Type,
                    options = q.Options.Select(o => o.Text).ToList(),
                    correctAnswer = q.CorrectAnswer
                }).ToList()
            };

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:5198/api/quiz")
                {
                    Content = JsonContent.Create(quizToSend)
                };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                createQuizMessage = "Quiz created successfully!";
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                createQuizMessage = $"Failed to create quiz: {error}";
            }
        }
        catch (Exception ex)
        {
            createQuizMessage = $"Error: {ex.Message}";
        }
    }

    private void ToggleQuestionVisibility(int questionId)
    {
        var questionExists = questions.Any(q => q.Id == questionId);
        if (!questionExists)
        {
            return;
        }

        if (visibleQuestionIds.Contains(questionId))
        {
            visibleQuestionIds.Remove(questionId);
        }
        else
        {
            visibleQuestionIds.Add(questionId);
        }

        StateHasChanged();
    }

    private void RemoveQuestion(QuestionModel question)
    {
        if (visibleQuestionIds.Contains(question.Id))
        {
            visibleQuestionIds.Remove(question.Id);
        }
        questions.Remove(question);
    }
}
