@page "/joinlobby"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light custom-background">
    <div class="card shadow-lg p-4 position-relative" style="max-width: 400px; width: 100%;">
        <div class="character-image">
            <img src="./images/avatar.png" alt="Character" class="character-img" />
        </div>

        <div class="text-center">
            <h3 class="mb-4">Join Lobby</h3>
        </div>

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Processing your request...</p>
            </div>
        }
        else if (!isPinValidated)
        {
            <EditForm Model="joinLobbyModel" OnValidSubmit="HandlePinSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <InputText id="pin" @bind-Value="joinLobbyModel.Pin" class="form-control form-control-lg" placeholder="Lobby PIN" />
                </div>

                <button type="submit" class="btn btn-dark btn-lg w-100">Enter</button>
            </EditForm>
        }
        else if (!isNicknameValidated)
        {
            <EditForm Model="joinLobbyModel" OnValidSubmit="HandleNicknameSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="nickname" class="form-label">Choose a Nickname:</label>
                    <InputText id="nickname" @bind-Value="joinLobbyModel.Nickname" class="form-control form-control-lg" />
                </div>

                <button type="submit" class="btn btn-dark btn-lg w-100">Set Nickname</button>
            </EditForm>
        }
        else if (!isAvatarSelected)
        {
            <div>
                <h4 class="text-center mb-4">Choose Your Avatar</h4>
                <div class="mb-3 text-center">
                    <label>Generated Avatar:</label>
                    <div class="mt-2">
                        <img src="@avatarUrl" alt="Avatar" class="rounded-circle border" style="width: 120px; height: 120px;" />
                    </div>
                    <button type="button" class="btn btn-dark btn-lg mt-3" @onclick="GenerateAvatar">Generate New Avatar</button>
                </div>

                <button class="btn btn-primary btn-lg w-100 mt-3" @onclick="FinalizeAvatar">Confirm Avatar</button>
            </div>
        }
        else
        {
            <p class="text-success mt-3 text-center">Redirecting to the lobby...</p>
        }

        @if (!string.IsNullOrEmpty(joinLobbyMessage))
        {
            <p class="text-danger mt-4 text-center">@joinLobbyMessage</p>
        }
    </div>
</div>

<style>
    .custom-background {
        background-image: url('./images/joinlobby_background.jpg'); 
        background-size: cover; 
        background-position: center; 
        background-repeat: no-repeat; 
    }

    .character-image {
        position: absolute;
        top: -80px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1; 
    }

    .character-img {
        width: 100px; 
        height: auto;
    }
</style>



@code {
    private JoinLobbyModel joinLobbyModel = new JoinLobbyModel();
    private string joinLobbyMessage = string.Empty;
    private bool isPinValidated = false;
    private bool isNicknameValidated = false;
    private bool isAvatarSelected = false;
    private bool isLoading = false; 
    private int lobbyId;
    private string avatarUrl;

    private async Task HandlePinSubmit()
    {
        if (string.IsNullOrWhiteSpace(joinLobbyModel.Pin))
        {
            joinLobbyMessage = "PIN cannot be empty.";
            return;
        }

        isLoading = true; 
        joinLobbyMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:5198/api/lobby/join-by-pin", new { pin = joinLobbyModel.Pin });
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JoinLobbyResponse>();
                if (result != null)
                {
                    lobbyId = result.LobbyId;
                    isPinValidated = true;
                }
                else
                {
                    joinLobbyMessage = "Failed to retrieve lobby details.";
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                joinLobbyMessage = $"Failed to validate PIN. Error: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            joinLobbyMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false; 
        }
    }

    private async Task HandleNicknameSubmit()
    {
        if (string.IsNullOrWhiteSpace(joinLobbyModel.Nickname))
        {
            joinLobbyMessage = "Nickname cannot be empty.";
            return;
        }

        isNicknameValidated = true;
        GenerateAvatar();
    }

    private void GenerateAvatar()
    {
        var randomSeed = Guid.NewGuid().ToString();
        avatarUrl = $"https://api.dicebear.com/5.x/avataaars/svg?seed={randomSeed}";
    }

    private async Task FinalizeAvatar()
    {
        try
        {
            var nicknameRequest = new SetNicknameRequest { LobbyId = lobbyId, Nickname = joinLobbyModel.Nickname };
            var response = await Http.PostAsJsonAsync("https://localhost:5198/api/lobby/set-nickname", nicknameRequest);
            if (response.IsSuccessStatusCode)
            {
                joinLobbyMessage = "Avatar and Nickname set successfully!";

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "nickname", joinLobbyModel.Nickname);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "avatarUrl", avatarUrl);

                isAvatarSelected = true;
                Navigation.NavigateTo($"/lobby/{joinLobbyModel.Pin}");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                joinLobbyMessage = $"Failed to set nickname. Error: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            joinLobbyMessage = $"Error: {ex.Message}";
        }
    }

    public class JoinLobbyModel
    {
        public string Pin { get; set; }
        public string Nickname { get; set; } = "Guest";
    }

    public class JoinLobbyResponse
    {
        public int LobbyId { get; set; }
    }

    public class SetNicknameRequest
    {
        public int LobbyId { get; set; }
        public string Nickname { get; set; }
    }
}
